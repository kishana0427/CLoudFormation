‚úÖ Key Fixes:
üîÅ Stack 1 ‚Äì VPC and Subnets

    üü¢ Ensure each subnet is in a different Availability Zone ‚Äî EKS requires subnets in at least two different AZs.

    üü¢ Ensure all outputs are correctly defined.

üîÅ Stack 2 ‚Äì EKS Cluster

    üü¢ Fixes for VPC/subnet AZ issues.

    üü¢ Add missing permissions (AmazonEKSServicePolicy) to EKSClusterRole.

    üü¢ Import security group correctly.

    üü¢ Ensure EKS version is valid and supported.

‚úÖ ‚úÖ FIXED TEMPLATE 1: VPC + Subnets + NAT + SG (Stack 1)

AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with Public and Private Subnets for EKS and Windows Nodes

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets in different AZs
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  # NAT Gateway Setup
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGateway

  # Route Tables and Routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow RDP and ICMP
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: My-VPC-SG

Outputs:
  MyVPCID:
    Value: !Ref MyVPC
    Export:
      Name: MyVPCID

  MyPrivateSubnetIDs:
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: MyPrivateSubnetIDs

  MyPublicSubnetIDs:
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: MyPublicSubnetIDs

  MySG:
    Value: !Ref MySG
    Export:
      Name: MySG


‚úÖ ‚úÖ FIXED TEMPLATE 2: EKS Cluster + Node Group (Stack 2)


AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster with Windows Node Group in private subnets

Parameters:
  ClusterName:
    Type: String
    Default: MyCluster

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: '1.29'
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Split [",", !ImportValue MyPrivateSubnetIDs]
        SecurityGroupIds:
          - !ImportValue MySG

  EKSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      Subnets: !Split [",", !ImportValue MyPrivateSubnetIDs]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      AmiType: WINDOWS_CORE_2019_FULL
      InstanceTypes:
        - t3.large
      DiskSize: 50
      NodegroupName: !Sub ${ClusterName}-NodeGroup
      Tags:
        Name: !Sub ${ClusterName}-NodeGroup

Outputs:
  EKSClusterName:
    Value: !Ref EKSCluster
    Export:
      Name: EKSClusterName

  EKSNodeGroup:
    Value: !Ref NodeGroup
    Export:
      Name: EKSNodeGroupName
‚úÖ Deployment Order

  1.  Deploy Stack 1 (VPC Stack).

  2.  Wait for successful completion.

  3.  Deploy Stack 2 (EKS Stack).


Let me know if you want to add a Linux node group, custom AMIs, Windows taints, or an EFS file system to this setup.



for Ubuntu


To deploy Ubuntu nodes (Linux-based) instead of Windows in your EKS cluster, you just need to update the Node Group configuration in Stack 2.


‚úÖ Ubuntu EKS NodeGroup Adjustments

Here's what to change:

    ‚úÖ Remove AmiType: WINDOWS_CORE_2019_FULL

    ‚úÖ Use AmiType: AL2_x86_64 or AL2_ARM_64 (Amazon Linux 2 is standard, works for Ubuntu too)

    ‚úÖ Use InstanceTypes that support Linux (like t3.medium)

    ‚úÖ For Ubuntu, Amazon EKS uses optimized AMIs published by Canonical (automatically selected based on amiFamily), so no manual AMI ID is needed unless you're customizing.


‚úÖ ‚úÖ FINAL EKS TEMPLATE (FOR UBUNTU NODES)


AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster with Ubuntu Nodes in Private Subnets

Parameters:
  ClusterName:
    Type: String
    Default: MyUbuntuCluster

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: '1.29'
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Split [",", !ImportValue MyPrivateSubnetIDs]
        SecurityGroupIds:
          - !ImportValue MySG

  EKSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      Subnets: !Split [",", !ImportValue MyPrivateSubnetIDs]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      AmiType: AL2_x86_64       # Use AL2 base for Ubuntu, or switch to CUSTOM if using Canonical AMI directly
      InstanceTypes:
        - t3.medium
      DiskSize: 20
      NodegroupName: !Sub ${ClusterName}-NodeGroup
      Tags:
        Name: !Sub ${ClusterName}-UbuntuNodes

Outputs:
  EKSClusterName:
    Value: !Ref EKSCluster
    Export:
      Name: EKSClusterName

  EKSNodeGroup:
    Value: !Ref NodeGroup
    Export:
      Name: EKSNodeGroupName


‚úÖ Note:

    While the AmiType: AL2_x86_64 is the default and works fine, Ubuntu-optimized EKS AMIs are typically
     used with self-managed node groups, or using launch templates with custom AMIs from Canonical.

If you specifically want official Canonical Ubuntu AMIs, let me know and I‚Äôll show how to use 
a Launch Template with a custom Ubuntu AMI ID + EKS bootstrap script.




***** using Ubuntu AMI and Security Groups & Keypair

Perfect! Let's walk through how to create an EKS Node Group with Ubuntu AMI, a key pair, and 
custom security groups using a Launch Template, which is required when using non-Amazon-provided AMIs like Ubuntu.


‚úÖ Summary of What We'll Do

   1. Use Canonical‚Äôs Ubuntu EKS-optimized AMI (publicly available).

   2. Use Launch Template to specify:

        Ubuntu AMI ID

        KeyPair name (for SSH)

        Security Group

        UserData (bootstrap script to join EKS)
  3.  Attach this Launch Template to a self-managed EKS NodeGroup.

‚úÖ Prerequisites

You need:

    ‚úÖ Ubuntu EKS AMI ID (I'll use one for us-east-1 as example ‚Äî you can replace).

    ‚úÖ A key pair already created in EC2 (e.g. MyKeyPair).

    ‚úÖ Stack 1 (VPC stack) deployed so MyPrivateSubnetIDs and MySG are exported.

‚úÖ Ubuntu EKS NodeGroup Template with Launch Template

AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Ubuntu NodeGroup via Launch Template

Parameters:
  ClusterName:
    Type: String
    Default: MyUbuntuCluster

  UbuntuAMI:
    Type: String
    Description: Ubuntu EKS Optimized AMI ID
    Default: ami-0eb25ecf2f3c3b22f  # Replace with latest Canonical Ubuntu AMI ID for your region

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to SSH into Ubuntu instances

Resources:

  # IAM role for EKS nodes
  EKSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-NodeInstanceRole

  # Launch Template for Ubuntu AMI
  UbuntuLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ClusterName}-UbuntuLT
      LaunchTemplateData:
        ImageId: !Ref UbuntuAMI
        InstanceType: t3.medium
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !ImportValue MySG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ClusterName}
        IamInstanceProfile:
          Name: !Ref NodeInstanceProfile

  # Instance profile for NodeGroup
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EKSNodeInstanceRole

  # Node Group using the Launch Template
  UbuntuNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !ImportValue EKSClusterName
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      Subnets: !Split [",", !ImportValue MyPrivateSubnetIDs]
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      LaunchTemplate:
        Name: !Ref UbuntuLaunchTemplate
        Version: !GetAtt UbuntuLaunchTemplate.LatestVersionNumber
      NodegroupName: !Sub ${ClusterName}-UbuntuNodeGroup
      Tags:
        Name: !Sub ${ClusterName}-UbuntuNodeGroup

Outputs:
  UbuntuNodeGroup:
    Value: !Ref UbuntuNodeGroup
    Export:
      Name: UbuntuNodeGroupName


‚úÖ Notes

    üîÅ AMI ID: The Default Ubuntu AMI is from Canonical. You can fetch latest EKS-compatible AMIs here:
    https://cloud-images.ubuntu.com/aws-eks/

    üéØ Security Group: It imports MySG from Stack 1.

    üîê Key Pair: Must exist in your AWS account before deployment. You can create it via AWS Console or CLI.

‚úÖ To Deploy

1.  Deploy VPC stack (template 1 above).

2.  Deploy EKS cluster stack (from earlier).

3.  Deploy this Ubuntu NodeGroup stack.

4.  Use kubectl get nodes to verify Ubuntu worker nodes joined.


Would you like me to combine all 3 stacks into a single CloudFormation 
template or add a Linux Launch Template for Amazon Linux 2 as comparison?


Great! Here's a complete CloudFormation template that includes all three stacks combined:

    ‚úÖ VPC with public & private subnets

    ‚úÖ EKS Cluster

    ‚úÖ EKS Ubuntu Node Group using a Launch Template

    ‚úÖ Key pair, security groups, NAT Gateway, and proper IAM roles

‚úÖ All-in-One CloudFormation Template (Ubuntu EKS NodeGroup)

AWSTemplateFormatVersion: '2010-09-09'
Description: Full EKS setup with VPC, EKS Cluster, and Ubuntu Node Group using Launch Template

Parameters:
  ClusterName:
    Type: String
    Default: MyUbuntuCluster

  UbuntuAMI:
    Type: String
    Description: Canonical Ubuntu EKS-Optimized AMI (replace with latest per region)
    Default: ami-0eb25ecf2f3c3b22f  # Example: Canonical Ubuntu 20.04 EKS-optimized for us-east-1

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 KeyPair to SSH into nodes

Resources:
  # VPC and Networking
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NATGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRT

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for EKS and SSH
  MySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS SG for control plane and SSH
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MyEKSSG

  # IAM Roles
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  EKSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EKSNodeInstanceRole

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: "1.29"
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
        SecurityGroupIds:
          - !Ref MySG

  # Launch Template for Ubuntu Nodes
  UbuntuLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ClusterName}-UbuntuLT
      LaunchTemplateData:
        ImageId: !Ref UbuntuAMI
        InstanceType: t3.medium
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref MySG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            /etc/eks/bootstrap.sh ${ClusterName}
        IamInstanceProfile:
          Name: !Ref NodeInstanceProfile

  # EKS Node Group using Ubuntu Launch Template
  UbuntuNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeInstanceRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
      ScalingConfig:
        MinSize: 1
        MaxSize: 2
        DesiredSize: 1
      LaunchTemplate:
        Name: !Ref UbuntuLaunchTemplate
        Version: !GetAtt UbuntuLaunchTemplate.LatestVersionNumber
      NodegroupName: !Sub ${ClusterName}-UbuntuNodeGroup
      Tags:
        Name: !Sub ${ClusterName}-UbuntuNodeGroup

Outputs:
  VpcId:
    Value: !Ref MyVPC

  ClusterName:
    Value: !Ref EKSCluster

  NodeGroup:
    Value: !Ref UbuntuNodeGroup

  PrivateSubnet:
    Value: !Ref PrivateSubnet1

  UbuntuLaunchTemplate:
    Value: !Ref UbuntuLaunchTemplate


‚úÖ What You Need Before Deployment

    ‚úÖ Valid KeyPair in your AWS region (can create via AWS Console or CLI).

    ‚úÖ Latest Canonical Ubuntu EKS AMI for your region (see here).

    ‚úÖ Deploy this in a region that supports EKS (e.g. us-east-1, ap-south-1).

Would you like me to:

    ‚úÖ Look up the latest Ubuntu EKS AMI for your region?

    ‚úÖ Include multiple availability zones (multi-AZ)?

    ‚úÖ Add a Linux Amazon Linux 2 node group too (for mix setup)?
    


