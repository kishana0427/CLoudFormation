To deploy Amazon EKS (Elastic Kubernetes Service) with worker nodes using CloudFormation, you typically need two main CloudFormation stacks:

1. EKS Cluster Stack â€“ creates the EKS control plane.

2. EKS Worker Nodes Stack â€“ creates EC2 worker nodes and joins them to the cluster.

Hereâ€™s a complete, working example in YAML format:

ðŸ”§ Step 1: EKS Cluster CloudFormation Template

AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Cluster Stack

Parameters:
  ClusterName:
    Type: String
    Default: eks-cluster
  KubernetesVersion:
    Type: String
    Default: '1.29'
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds: !Ref SubnetIds

Outputs:
  ClusterName:
    Value: !Ref ClusterName
  ClusterRoleArn:
    Value: !GetAtt EKSClusterRole.Arn
  ClusterEndpoint:
    Value: !GetAtt EKSCluster.Endpoint
  ClusterCA:
    Value: !GetAtt EKSCluster.CertificateAuthorityData


ðŸ”§ Step 2: Worker Node Group CloudFormation Template

AWSTemplateFormatVersion: '2010-09-09'
Description: EKS Worker Nodes

Parameters:
  ClusterName:
    Type: String
  NodeGroupName:
    Type: String
    Default: eks-workers
  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 2
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 4
  NodeInstanceType:
    Type: String
    Default: t3.medium
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      ScalingConfig:
        MinSize: !Ref NodeAutoScalingGroupMinSize
        MaxSize: !Ref NodeAutoScalingGroupMaxSize
        DesiredSize: !Ref NodeAutoScalingGroupMinSize
      DiskSize: 20
      Subnets: !Ref SubnetIds
      InstanceTypes:
        - !Ref NodeInstanceType
      NodeRole: !GetAtt NodeInstanceRole.Arn

Outputs:
  NodeGroupName:
    Value: !Ref NodeGroup
  NodeInstanceRoleArn:
    Value: !GetAtt NodeInstanceRole.Arn


ðŸ§­ How to Deploy

1. Create your VPC and Subnets (or use existing).

2. Deploy Cluster Stack:

aws cloudformation deploy \
  --template-file eks-cluster.yaml \
  --stack-name EKSClusterStack \
  --capabilities CAPABILITY_IAM \
  --parameter-overrides \
    ClusterName=my-cluster \
    VpcId=vpc-xxxxxxxx \
    SubnetIds='subnet-aaa,subnet-bbb'

3. Deploy Node Group Stack:

aws cloudformation deploy \
  --template-file eks-workers.yaml \
  --stack-name EKSWorkerStack \
  --capabilities CAPABILITY_IAM \
  --parameter-overrides \
    ClusterName=my-cluster \
    VpcId=vpc-xxxxxxxx \
    SubnetIds='subnet-aaa,subnet-bbb'
